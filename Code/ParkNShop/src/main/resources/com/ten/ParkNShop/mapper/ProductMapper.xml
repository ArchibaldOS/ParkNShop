<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ten.ParkNShop.mapper.ProductMapper">
	<resultMap id="BaseResultMap" type="com.ten.ParkNShop.entity.Product" >
		<!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
		<id column="productId" property="productId" jdbcType="INTEGER" />
		<result column="sellerId" property="sellerId" jdbcType="INTEGER" />
		<result column="productName" property="productName" jdbcType="VARCHAR" />
		<result column="productType" property="productType" jdbcType="INTEGER" />
		<result column="productPrice" property="productPrice" jdbcType="REAL" />
		<result column="storeCount" property="storeCount" jdbcType="INTEGER" />
		<result column="soldCount" property="soldCount" jdbcType="INTEGER" />
		<result column="productStatus" property="productStatus" jdbcType="INTEGER" />
		<result column="productIntroduction" property="productIntroduction" jdbcType="VARCHAR" />
		<result column="productPicture" property="productPicture" jdbcType="VARCHAR" />
	</resultMap>
	<parameterMap id="SearchInfos" type="com.ten.ParkNShop.entity.SearchInfo">
		<parameter property="productName" />
		<parameter property="searchType" />
	</parameterMap>
	<sql id="Base_Column_List" >
		<!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
		productId, sellerId, productName, productType, productPrice, storeCount, soldCount,
		productIntroduction, productPicture
	</sql>

	<insert id="addProduct" parameterType="com.ten.ParkNShop.entity.Product" keyProperty="productId">
		insert into product(sellerId,productName,productType,productPrice,storeCount,soldCount,productIntroduction,productStatus,productPicture)
		values( #{sellerId}, #{productName}, #{productType}, #{productPrice}, #{storeCount}, 0,#{productIntroduction}, 0, #{productPicture} )
	</insert>
	
    <update id="delete" parameterType="int">
		update product set productStatus = 1 where productId = ${productId} 
	</update>
	
	<update id="updateProduct1" parameterType="com.ten.ParkNShop.entity.Product">
		update product set productName = #{productName}, productType = #{productType}, productPrice = #{productPrice}, storeCount = #{storeCount}, productIntroduction = #{productIntroduction}, productPicture = #{productPicture}
		where productId = #{productId} 
	</update>
	
	<update id="updateProduct2" parameterType="com.ten.ParkNShop.entity.Product">
		update product set productName = #{productName}, productType = #{productType}, productPrice = #{productPrice}, storeCount = #{storeCount}, productIntroduction = #{productIntroduction}
		where productId = #{productId} 
	</update>
	
	<update id="updateStock" parameterType="int">
		update product set  storeCount = storeCount - #{storeCount}
		where productId = #{productId} 
	</update>
	
	<select id="count" resultType="int">
		SELECT
			count(1)
		FROM
			product
		WHERE sellerId = #{sellerId}
	</select>
	
	<select id="findAllBySellerId" parameterType="int" resultType="Product">
		SELECT 
			*
		FROM product
		WHERE sellerId = #{sellerId} and productStatus = 0
		ORDER BY productId
	</select> 
	
	<select id="findByProductId" resultType="com.ten.ParkNShop.entity.Product">
		SELECT 
			*
		FROM product
		WHERE productId = #{productId}

	</select> 
	
	<select id="sellerFindByPage" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        product
        WHERE sellerId=#{sellerId}
        LIMIT #{start},#{pageSize}
    </select>


	<select id="searchByProductName" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT
		productId, sellerId, productName, productType, productPrice, storeCount, soldCount,
		productIntroduction, productPicture
		FROM product
		WHERE productName LIKE CONCAT(CONCAT('%',#{productName}),'%') and productStatus = 0
	</select>

	<select id="searchBySearchType" parameterType="int" resultMap="BaseResultMap">
		SELECT
		productId, sellerId, productName, productType, productPrice, storeCount, soldCount,
		productIntroduction, productPicture
		FROM product
		WHERE productType = #{searchType} and productStatus = 0
		LIMIT #{start},#{pageSize}
	</select>

	<select id="searchByProductNameAndSearchType" resultMap="BaseResultMap">
		SELECT
		productId, sellerId, productName, productType,productStatus, productPrice, storeCount, soldCount,
		productIntroduction, productPicture
		FROM product
		WHERE  productName LIKE CONCAT(CONCAT('%',#{productName}),'%') AND productType = #{searchType} and productStatus = 0
	</select>

	<select id="searchTopSalesProducts" parameterType="int" resultMap="BaseResultMap">
		SELECT
			productId, sellerId, productName, productType, productPrice, storeCount, soldCount,
			productIntroduction, productPicture
			FROM product
			WHERE productStatus = 0
		GROUP BY
			soldCount
		DESC
		LIMIT #{topNum}
	</select>

	<select id="countByProductName" parameterType="java.lang.String" resultType="int">
		SELECT COUNT(1)
		FROM product
		WHERE productName LIKE CONCAT(CONCAT('%',#{productName}),'%') and productStatus = 0
	</select>


</mapper>