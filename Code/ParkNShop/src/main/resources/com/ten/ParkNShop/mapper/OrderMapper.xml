<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ten.ParkNShop.mapper.OrderMapper" >
  <resultMap id="BaseResultMap" type="com.ten.ParkNShop.entity.Order" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="orderId" property="orderId" jdbcType="INTEGER" />
    <result column="sellerId" property="sellerId" jdbcType="INTEGER" />
    <result column="buyerId" property="buyerId" jdbcType="INTEGER" />
    <result column="productId" property="productId" jdbcType="INTEGER" />
    <result column="count" property="count" jdbcType="INTEGER" />
    <result column="totalPrice" property="totalPrice" jdbcType="REAL" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="orderStatus" property="orderStatus" jdbcType="INTEGER" />
    <result column="orderTime" property="orderTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    orderId, sellerId, buyerId, productId, count, totalPrice, address, orderStatus, orderTime
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from orders
    where orderId = #{orderId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from orders
    where orderId = #{orderId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ten.ParkNShop.entity.Order" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty='orderId' resultType='int' order='AFTER'  >
      select LAST_INSERT_ID();
    </selectKey>
    insert into orders (orderId, sellerId, buyerId,
      productId, count, totalPrice,
      address, orderStatus, orderTime
      )
    values (#{orderId,jdbcType=INTEGER}, #{sellerId,jdbcType=INTEGER}, #{buyerId,jdbcType=INTEGER},
      #{productId,jdbcType=INTEGER}, #{count,jdbcType=INTEGER}, #{totalPrice,jdbcType=REAL},
      #{address,jdbcType=VARCHAR}, #{orderStatus,jdbcType=INTEGER}, #{orderTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <select id="countOrdersByBuyerId" parameterType="java.lang.Integer" resultType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT COUNT (orderId) from orders where buyerId = #{buyerId}
  </select>
  <insert id="insertSelective" parameterType="com.ten.ParkNShop.entity.Order" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        orderId,
      </if>
      <if test="sellerId != null" >
        sellerId,
      </if>
      <if test="buyerId != null" >
        buyerId,
      </if>
      <if test="productId != null" >
        productId,
      </if>
      <if test="count != null" >
        count,
      </if>
      <if test="totalPrice != null" >
        totalPrice,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="orderStatus != null" >
        orderStatus,
      </if>
      <if test="orderTime != null" >
        orderTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="sellerId != null" >
        #{sellerId,jdbcType=INTEGER},
      </if>
      <if test="buyerId != null" >
        #{buyerId,jdbcType=INTEGER},
      </if>
      <if test="productId != null" >
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="count != null" >
        #{count,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=REAL},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="orderStatus != null" >
        #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="orderTime != null" >
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ten.ParkNShop.entity.Order" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update orders
    <set >
      <if test="sellerId != null" >
        sellerId = #{sellerId,jdbcType=INTEGER},
      </if>
      <if test="buyerId != null" >
        buyerId = #{buyerId,jdbcType=INTEGER},
      </if>
      <if test="productId != null" >
        productId = #{productId,jdbcType=INTEGER},
      </if>
      <if test="count != null" >
        count = #{count,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        totalPrice = #{totalPrice,jdbcType=REAL},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="orderStatus != null" >
        orderStatus = #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="orderTime != null" >
        orderTime = #{orderTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where orderId = #{orderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ten.ParkNShop.entity.Order" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update orders
    set sellerId = #{sellerId,jdbcType=INTEGER},
      buyerId = #{buyerId,jdbcType=INTEGER},
      productId = #{productId,jdbcType=INTEGER},
      count = #{count,jdbcType=INTEGER},
      totalPrice = #{totalPrice,jdbcType=REAL},
      address = #{address,jdbcType=VARCHAR},
      orderStatus = #{orderStatus,jdbcType=INTEGER},
      orderTime = #{orderTime,jdbcType=TIMESTAMP}
    where orderId = #{orderId,jdbcType=INTEGER}
  </update>

    <select id="selectAllOrder" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        orders
        LIMIT #{start},#{pageSize}
    </select>

    <select id="selectOrderByBuyerId" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        orders
        WHERE buyerId=#{buyerId}
        ORDER BY orderTime DESC
    </select>
    <select id="selectOrderBySellerId" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        orders
        WHERE sellerId=#{sellerId}
        LIMIT #{start},#{pageSize}
    </select>
    <select id="selectOrderByProductId" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        orders
        WHERE productId=#{productId}
        LIMIT #{start},#{pageSize}
    </select>

    <!--选择一段时间之内的所有订单（成功完成）-->
    <select id="selectAllOrdersBetweenTime" resultMap="BaseResultMap" parameterType="String">
        SELECT
        *
        FROM
        orders
        WHERE
        orderTime BETWEEN #{startTime} AND #{endTime}
        AND orderStatus = 5
    </select>
    
    <select id="sellerSelectOrdersBetweenTime" resultMap="BaseResultMap">
        SELECT
        	*
        FROM
        	orders
        WHERE
        	orderTime BETWEEN #{startTime} AND #{endTime}
         AND sellerId = #{sellerId}
         AND orderStatus = 5
         ORDER BY orderTime DESC
    </select>
    
    <select id="countCompleted" parameterType="int" resultType="int">
		SELECT
			count(1)
		FROM
			orders
		WHERE
		    sellerId = #{sellerId} AND orderStatus = 5
	</select>
	
	<select id="countUncompleted" parameterType="int" resultType="int">
		SELECT
			count(1)
		FROM
			orders
		WHERE
		    sellerId = #{sellerId} AND orderStatus IN (3,4,6,7,8)
	</select>
	
	<select id="findCompleted" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        orders
        WHERE sellerId=#{sellerId} AND orderStatus = 5
        LIMIT #{start},#{pageSize}
    </select>
    
    <select id="findCompletedNoPage" resultMap="BaseResultMap" parameterType="int">
    	SELECT
        *
        FROM
        orders
        WHERE sellerId=#{sellerId} AND orderStatus = 5
    </select>
    
    <select id="findUncompleted" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM
        orders
        WHERE sellerId=#{sellerId} AND orderStatus IN (3,4,6,7,8)
        LIMIT #{start},#{pageSize}
    </select>
    
    <update id="changeToShip" parameterType="int">
		update orders set orderStatus = 4
		where orderId = #{orderId} 
   </update>
   
    <update id="changeToRefundSucceed" parameterType="int">
		update orders set orderStatus = 7
		where orderId = #{orderId} 
    </update>
  
  	<update id="changeToRefundFailed" parameterType="int">
		update orders set orderStatus = 8
		where orderId = #{orderId} 
    </update>
    <update id="changeToPaid" parameterType="int">
         update orders set orderStatus = 3
         where orderId = #{orderId}
    </update>
  <update id="changeToReceived" parameterType="int">
    update orders set orderStatus = 5
    where orderId = #{orderId}
  </update>

    <update id="changeToCommented" parameterType="int">
        update orders set orderStatus = 9
        where orderId = #{orderId}
    </update>
</mapper>